{"version":3,"sources":["../src/Particle.js"],"names":["Particle","options","agent","baseUrl","username","password","tokenDuration","request","uri","form","grant_type","client_id","clientId","client_secret","clientSecret","expires_in","method","post","token","delete","access_token","get","auth","deviceId","requestTransfer","id","request_transfer","name","put","iccid","undefined","promoCode","productId","shouldUpdate","product_id","update_after_claim","signal","files","targetVersion","build_target_version","latest","app","platformId","platform_id","binaryId","req","use","prefix","headers","debug","key","algorithm","deviceID","publicKey","toString","filename","order","Date","now","argument","args","org","product","toLowerCase","encodeURIComponent","connect","data","isPrivate","url","requestType","json","query","responseTemplate","responseTopic","rejectUnauthorized","webhookAuth","event","mydevices","deviceid","hookId","stripeToken","stripe_token","head","countryCode","country","promo_code","action","onlyFeatured","featured","page","limit","filter","sort","architectures","category","Array","isArray","join","version","repo","buffer","parse","responseType","then","res","body","xhr","response","api"],"mappings":"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","file":"Particle.js","sourcesContent":["import request from 'superagent';\nimport binaryParser from './superagent-binary-parser';\nimport Defaults from './Defaults';\nimport EventStream from './EventStream';\nimport Agent from './Agent';\nimport Client from './Client';\n\n/**\n * Particle Cloud API wrapper.\n *\n * See <https://docs.particle.io/reference/javascript/> for examples\n * of using the `Particle` class.\n *\n * Most Particle methods take a single unnamed argument object documented as\n * `$0` with key/value pairs for each option.\n */\nclass Particle {\n\t/**\n\t * Contructor for the Cloud API wrapper.\n\t *\n\t * Create a new Particle object and call methods below on it.\n\t *\n\t * @param  {Object} options Options to be used for all requests (see [Defaults](../src/Defaults.js))\n\t */\n\tconstructor(options = {}) {\n\t\tObject.assign(this, Defaults, options);\n\t\tthis.agent = new Agent(this.baseUrl);\n\t}\n\n\t/**\n\t * Login to Particle Cloud using an existing Particle acccount.\n\t * @param  {String} $0.username      Username for the Particle account\n\t * @param  {String} $0.password      Password for the Particle account\n\t * @param  {Number} $0.tokenDuration How long the access token should last in seconds\n\t * @return {Promise}\n\t */\n\tlogin({ username, password, tokenDuration = this.tokenDuration }) {\n\t\treturn this.request({ uri: '/oauth/token', form: {\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tgrant_type: 'password',\n\t\t\tclient_id: this.clientId,\n\t\t\tclient_secret: this.clientSecret,\n\t\t\texpires_in: tokenDuration,\n\t\t}, method: 'post' });\n\t}\n\n\t/**\n\t * Create a user account for the Particle Cloud\n\t * @param  {String} $0.username Email of the new user\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tcreateUser({ username, password }) {\n\t\treturn this.post('/v1/users', {\n\t\t\tusername, password,\n\t\t});\n\t}\n\n\t/**\n\t * Send reset password email for a Particle Cloud user account\n\t * @param  {String} $0.username Email of the user\n\t * @return {Promise}\n\t */\n\tresetPassword({ username }) {\n\t\treturn this.post('/v1/user/password-reset', { username });\n\t}\n\n\t/**\n\t * Revoke an access token\n\t * @param  {String} $0.username Username of the Particle cloud account that the token belongs to.\n\t * @param  {String} $0.password Password for the account\n\t * @param  {String} $0.token    Access token you wish to revoke\n\t * @return {Promise}\n\t */\n\tremoveAccessToken({ username, password, token }) {\n\t\treturn this.delete(`/v1/access_tokens/${token}`, {\n\t\t\taccess_token: token,\n\t\t}, { username, password });\n\t}\n\n\t/**\n\t * List all valid access tokens for a Particle Cloud account\n\t * @param  {String} $0.username Username\n\t * @param  {String} $0.password Password\n\t * @return {Promise}\n\t */\n\tlistAccessTokens({ username, password }) {\n\t\treturn this.get('/v1/access_tokens', { username, password });\n\t}\n\n\t/**\n\t * List devices claimed to the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistDevices({ auth }) {\n\t\treturn this.get('/v1/devices', auth);\n\t}\n\n\t/**\n\t * Get detailed informationa about a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access token\n\t * @return {Promise}\n\t */\n\tgetDevice({ deviceId, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}`, auth);\n\t}\n\n\t/**\n\t * Claim a device to the account. The device must be online and unclaimed.\n\t * @param  {String} $0.deviceId Device ID\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tclaimDevice({ deviceId, requestTransfer, auth }) {\n\t\treturn this.post('/v1/devices', {\n\t\t\tid: deviceId,\n\t\t\trequest_transfer: !!requestTransfer\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Unclaim / Remove a device from your account\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tremoveDevice({ deviceId, auth }) {\n\t\treturn this.delete(`/v1/devices/${deviceId}`, null, auth);\n\t}\n\n\t/**\n\t * Rename a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Desired Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\trenameDevice({ deviceId, name, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, { name }, auth);\n\t}\n\n\t/**\n\t * Generate a claim code to use in the device claiming process.\n\t * @param  {String} $0.auth  Access Token\n\t * @param  {String} [$0.iccid] ICCID of the SIM card used in the Electron\n\t * @return {Promise}\n\t */\n\tgetClaimCode({ auth, iccid = undefined }) {\n\t\treturn this.post('/v1/device_claims', { iccid }, auth);\n\t}\n\n\tvalidatePromoCode({auth, promoCode}) {\n\t\treturn this.get(`/v1/promo_code/${promoCode}`, auth);\n\t}\n\n\tchangeProduct({ deviceId, productId, shouldUpdate, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tproduct_id: productId,\n\t\t\tupdate_after_claim: shouldUpdate || false,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get the value of a device variable\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Variable name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tgetVariable({ deviceId, name, auth }) {\n\t\treturn this.get(`/v1/devices/${deviceId}/${name}`, auth);\n\t}\n\n\t/**\n\t * Instruct the device to turn on/off the LED in a rainbow pattern\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {Boolean} $0.signal   Signal on or off\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tsignalDevice({ deviceId, signal, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tsignal: ( !!signal ? '1' : '0' ),\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile and flash application firmware to a device\n\t * @param  {String} $0.deviceId      Device ID or Name\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          String\n\t * @return {Promise}\n\t */\n\tflashDevice({ deviceId, files, targetVersion, auth }) {\n\t\tconst form = {};\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: `/v1/devices/${deviceId}`,\n\t\t\tfiles, auth, form, method: 'put' });\n\t}\n\n\t/**\n\t * Flash the Tinker application to a device\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tflashTinker({ deviceId, auth }) {\n\t\treturn this.put(`/v1/devices/${deviceId}`, {\n\t\t\tapp: 'tinker',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Compile firmware using the Particle Cloud\n\t * @param  {Object} $0.files         Object containing files to be compiled. Keys should be the filenames, and the values should be a path or Buffer of the file contents.\n\t * @param  {Number} [$0.platformId]    Platform id number of the device you are compiling for. Common values are 0=Core, 6=Photon, 10=Electron.\n\t * @param  {String} [$0.targetVersion=latest] System firmware version to compile against\n\t * @param  {String} $0.auth          Access Token\n\t * @return {Promise}\n\t */\n\tcompileCode({ files, platformId, targetVersion, auth }) {\n\t\tconst form = { platform_id: platformId };\n\t\tif (targetVersion) {\n\t\t\tform.build_target_version = targetVersion;\n\t\t} else {\n\t\t\tform.latest = 'true';\n\t\t}\n\t\treturn this.request({ uri: '/v1/binaries',\n\t\t\tfiles, auth, form, method: 'post' });\n\t}\n\n\t/**\n\t * Download a firmware binary\n\t * @param  {String} $0.binaryId Binary ID received from a successful compile call\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Request}\n\t */\n\tdownloadFirmwareBinary({ binaryId, auth }) {\n\t\tconst uri = `/v1/binaries/${binaryId}`;\n\t\tconst req = request('get', uri);\n\t\treq.use(this.prefix);\n\t\tthis.headers(req, auth);\n\t\tif (this.debug) {\n\t\t\tthis.debug(req);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Send a new device public key to the Particle Cloud\n\t * @param  {String} $0.deviceId  Device ID or Name\n\t * @param  {(String|Buffer)} $0.key       Public key contents\n\t * @param  {String} [$0.algorithm=rsa] Algorithm used to generate the public key. Valid values are `rsa` or `ecc`.\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tsendPublicKey({ deviceId, key, algorithm, auth }) {\n\t\treturn this.post(`/v1/provisioning/${deviceId}`, {\n\t\t\tdeviceID: deviceId,\n\t\t\tpublicKey: ( typeof key === 'string' ? key : key.toString() ),\n\t\t\tfilename: 'particle-api',\n\t\t\torder: `manual_${ Date.now() }`,\n\t\t\talgorithm: algorithm || 'rsa'\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Call a device function\n\t * @param  {String} $0.deviceId Device ID or Name\n\t * @param  {String} $0.name     Function name\n\t * @param  {String} $0.argument Function argument\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise}\n\t */\n\tcallFunction({ deviceId, name, argument, auth }) {\n\t\treturn this.post(`/v1/devices/${deviceId}/${name}`, {\n\t\t\targs: argument,\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Get a stream of events\n\t * @param  {String} [$0.deviceId] Device ID or Name, or `mine` to indicate only your devices.\n\t * @param  {String} [$0.name]     Event Name\n\t * @param  {String} [$0.org]     Organization Slug\n\t * @param  {String} [$0.product]     Product Slug or Product ID\n\t * @param  {String} $0.auth     Access Token\n\t * @return {Promise} If the promise resolves, the resolution value will be an EventStream object that will\n\t * emit 'event' events, as well as the specific named event.\n\t */\n\tgetEventStream({ deviceId, name, org, product, auth }) {\n\t\tlet uri = '/v1/';\n\t\tif (org) {\n\t\t\turi += `orgs/${org}/`;\n\t\t}\n\n\t\tif (product) {\n\t\t\turi += `products/${product}/`;\n\t\t}\n\n\t\tif (deviceId) {\n\t\t\turi += 'devices/';\n\t\t\tif (!(deviceId.toLowerCase() === 'mine')) {\n\t\t\t\turi += `${deviceId}/`;\n\t\t\t}\n\t\t}\n\n\t\turi += 'events';\n\n\t\tif (name) {\n\t\t\turi += `/${encodeURIComponent(name)}`;\n\t\t}\n\n\t\treturn new EventStream(`${this.baseUrl}${uri}`, auth, { debug: this.debug }).connect();\n\t}\n\n\t/**\n\t * Publish a event to the Particle Cloud\n\t * @param  {String} $0.name      Event name\n\t * @param  {String} $0.data      Event data\n\t * @param  {Boolean} $0.isPrivate Should the event be publicly available?\n\t * @param  {String} $0.auth      Access Token\n\t * @return {Promise}\n\t */\n\tpublishEvent({ name, data, isPrivate, auth }) {\n\t\treturn this.post('/v1/devices/events', {\n\t\t\tname,\n\t\t\tdata,\n\t\t\t'private': isPrivate\n\t\t}, auth);\n\t}\n\n\t/**\n\t * Create a webhook\n\t * @param  {String} $0.deviceId           Device ID or Name\n\t * @param  {String} $0.name               Webhook name\n\t * @param  {String} $0.url                URL the webhook should hit\n\t * @param  {String} [$0.requestType=POST]        HTTP method to use\n\t * @param  {Object} [$0.headers]            Additional headers to add to the webhook\n\t * @param  {Object} [$0.json]               JSON data\n\t * @param  {Object} [$0.query]              Query string data\n\t * @param  {Object} [$0.responseTemplate]   Webhook response template\n\t * @param  {Object} [$0.responseTopic]      Webhook response topic\n\t * @param  {Boolean} [$0.rejectUnauthorized] Reject invalid HTTPS certificates\n\t * @param  {Object} [$0.webhookAuth]        HTTP Basic Auth information\n\t * @param  {Object} [$0.form]               Form data\n\t * @param  {String} $0.auth               Access Token\n\t * @return {Promise}\n\t */\n\tcreateWebhook({ deviceId, name, url, requestType, headers, json, query, responseTemplate, responseTopic, rejectUnauthorized, webhookAuth, form, auth }) {\n\t\tconst data = { event: name, url, requestType, headers, json, query, responseTemplate, responseTopic, rejectUnauthorized, auth: webhookAuth, form };\n\t\tif (deviceId === 'mine') {\n\t\t\tdata.mydevices = true;\n\t\t} else {\n\t\t\tdata.deviceid = deviceId;\n\t\t}\n\t\treturn this.post('/v1/webhooks', data, auth);\n\t}\n\n\t/**\n\t * Delete a webhook\n\t * @param  {String} $0.hookId Webhook ID\n\t * @param  {String} $0.auth   Access Token\n\t * @return {Promise}\n\t */\n\tdeleteWebhook({ hookId, auth }) {\n\t\treturn this.delete(`/v1/webhooks/${hookId}`, null, auth);\n\t}\n\n\t/**\n\t * List all webhooks owned by the account\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tlistWebhooks({ auth }) {\n\t\treturn this.get('/v1/webhooks', auth);\n\t}\n\n\t/**\n\t * Get details about the current user\n\t * @param  {String} $0.auth Access Token\n\t * @return {Promise}\n\t */\n\tgetUserInfo({ auth }) {\n\t\treturn this.get('/v1/user', auth);\n\t}\n\n\tsetUserInfo({ stripeToken, auth }) {\n\t\treturn this.put('/v1/user', {\n\t\t\tstripe_token: stripeToken,\n\t\t}, auth);\n\t}\n\n\tcheckSIM({ iccid, auth }) {\n\t\treturn this.head(`/v1/sims/${iccid}`, auth);\n\t}\n\n\tactivateSIM({ iccid, countryCode, promoCode, auth }) {\n\t\treturn this.put(`/v1/sims/${iccid}`, {\n\t\t\tcountry: countryCode,\n\t\t\tpromo_code: promoCode,\n\t\t\taction: 'activate',\n\t\t}, auth);\n\t}\n\n\t/**\n\t * List valid build targets to be used for compiling\n\t * @param  {String} $0.auth         Access Token\n\t * @param  {Boolean} [$0.onlyFeatured=false] Only list featured build targets\n\t * @return {Promise}\n\t */\n\tlistBuildTargets({ auth, onlyFeatured = undefined }) {\n\t\tlet query;\n\t\tif (onlyFeatured !== undefined) {\n\t\t\tquery = { featured: !!onlyFeatured };\n\t\t}\n\t\treturn this.get('/v1/build_targets', auth, query);\n\t}\n\n\t/**\n\t * List firmware libraries\n\t * @param  {String} $0.auth Access Token\n\t * @param  {Number} $0.page Page index (default, first page)\n\t * @param  {Number} $0.limit Number of items per page\n\t * @param  {String} $0.filter Search term for the libraries\n\t * @param  {String} $0.sort Ordering key for the library list\n\t * @param  {Array<String>}  $0.architectures List of architectures to filter\n\t * @param  {String} $0.category Category to filter\n\t * @return {Promise}\n\t */\n\tlistLibraries({ auth, page, limit, filter, sort, architectures, category }) {\n\t\treturn this.get('/v1/libraries', auth, {\n\t\t\tpage,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t\tarchitectures: (Array.isArray(architectures) ? architectures.join(',') : architectures),\n\t\t\tcategory\n\t\t});\n\t}\n\n\t/**\n\t * Get firmware library details\n\t * @param  {String} $0.auth Access Token\n\t * @param  {String} $0.name Name of the library to fetch\n\t * @param  {String} $0.version Version of the library to fetch (default: latest)\n\t * @return {Promise}\n\t */\n\tgetLibrary({ auth, name, version }) {\n\t\treturn this.get(`/v1/libraries/${name}`, auth, { version });\n\t}\n\n\t/**\n\t * Firmware library details for each version\n\t * @param  {String} $0.auth Access Token\n\t * @param  {String} $0.name Name of the library to fetch\n\t * @param  {Number} $0.page Page index (default, first page)\n\t * @param  {Number} $0.limit Number of items per page\n\t * @return {Promise}\n\t */\n\tgetLibraryVersions({ auth, name, page, limit }) {\n\t\treturn this.get(`/v1/libraries/${name}/versions`, auth, {\n\t\t\tpage,\n\t\t\tlimit\n\t\t});\n\t}\n\n\t/**\n\t * Publish a new version of a firmware library\n\t * @param  {String} $0.auth Access Token\n\t * @param  {String} $0.name Name of the library to publish\n\t * @param  {String} $0.repo Public git URL of the library\n\t * @return {Promise}\n\t */\n\tcreateLibrary({ auth, name, repo }) {\n\t\treturn this.post(`/v1/libraries/${name}`, { repo }, auth);\n\t}\n\n\t/**\n\t * Download an external file that may not be on the API\n\t * @param  {String} $0.url URL of the file.\n\t * @return {Promise} Resolves to a buffer with the file data\n\t */\n\tdownloadFile({ url }) {\n\t\tlet req = request.get(url);\n\t\tif (req.buffer) {\n\t\t\treq = req.buffer(true).parse(binaryParser);\n\t\t} else if (req.responseType) {\n\t\t\treq = req.responseType('arraybuffer').then(res => {\n\t\t\t\tres.body = res.xhr.response;\n\t\t\t\treturn res;\n\t\t\t});\n\t\t}\n\t\treturn req.then(res => res.body);\n\t}\n\n\tget(uri, auth, query = undefined) {\n\t\treturn this.agent.get(uri, auth, query);\n\t}\n\n\thead(uri, auth) {\n\t\treturn this.agent.head(uri, auth);\n\t}\n\n\tpost(uri, data, auth) {\n\t\treturn this.agent.post(uri, data, auth);\n\t}\n\n\tput(uri, data, auth) {\n\t\treturn this.agent.put(uri, data, auth);\n\t}\n\n\tdelete(uri, data, auth) {\n\t\treturn this.agent.delete(uri, data, auth);\n\t}\n\n\trequest(args) {\n\t\treturn this.agent.request(args);\n\t}\n\n\tclient(options = {}) {\n\t\treturn new Client(Object.assign({ api: this}, options));\n\t}\n}\n\nexport default Particle;\n"]}